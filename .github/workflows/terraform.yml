name: 'terraform-keyvault-creation'

on:
  push:
    branches: [ "main" ]
    
env:
  ARM_CLIENT_ID: ${{ secrets.DEV_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.DEV_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.DEV_SUBSCRIPTION_ID }}
  
  WORKING_DIRECTORY: keyvault
jobs:
  deploy-azure-infra-terraform-keyvault:
    name: 'keyvault creation'
    runs-on: ubuntu-latest

    steps:
    # - name: Install Azure CLI
    #  run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    - name: Login to Azure with Service Principal
      uses: Azure/login@v2
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }} 

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.DEV_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.DEV_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.DEV_SUBSCRIPTION_ID }}    
      run: |
       pwd
       ls -ltr
       echo ${{github.workspace}}
       cd ${{env.WORKING_DIRECTORY}}
       terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      # env:
      #   ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      #   ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      #   ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      #   ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }} 
      run: |
       cd ${{env.WORKING_DIRECTORY}}
       terraform plan --var-file=dev.tfvars -input=false -out=tfplan ; cat tfplan > tf-file.plan
       ls -ltr

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
